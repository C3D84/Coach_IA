import streamlit as st
import os
import json
import pandas as pd
import io
from ia.generateur_entrainement import generer_programme_ia, generer_planification_seances
from utils.export_txt import exporter_programme_txt
from utils.export_pdf import exporter_programme_pdf

# === CONFIGURATION ===
st.set_page_config(page_title="Coach IA - Assistant Entra√Æneur", layout="wide")

# === Chargement du profil coach ===
profil_path = os.path.join("ressources", "profil.json")
profil = {"nom": "Coach", "club": "", "logo": ""}

if os.path.exists(profil_path):
    with open(profil_path, "r", encoding="utf-8") as f:
        profil.update(json.load(f))

# === MENU LAT√âRAL ===
if profil.get("logo") and os.path.exists(profil["logo"]):
    st.sidebar.image(profil["logo"], width=100)
else:
    st.sidebar.image("https://upload.wikimedia.org/wikipedia/commons/thumb/f/f3/Football_iu_1996.svg/512px-Football_iu_1996.svg.png", width=80)

st.sidebar.title(f"‚öôÔ∏è {profil.get('nom', 'Coach')} - Menu")
choix = st.sidebar.radio("Navigation", [
    "üè† Accueil",
    "üéØ G√©n√©rer une s√©ance IA",
    "üìÖ Planification multi-s√©ances",
    "üìã Entra√Ænement manuel",
    "‚ûï Ajouter un exercice",
    "‚≠ê Mes exercices",
    "üë§ Mon profil"
])

# === ACCUEIL ===
if choix == "üè† Accueil":
    st.title(f"üëã Bienvenue {profil.get('nom', 'Coach')} !")
    st.markdown(f"""
    Bienvenue dans votre assistant d'entra√Ænement **Coach IA** pour le club **{profil.get('club', '')}**.

    Ce logiciel vous permet de :
    - G√©n√©rer automatiquement des s√©ances d'entra√Ænement adapt√©es ‚öΩ
    - Planifier plusieurs s√©ances coh√©rentes üìÖ
    - Composer vos propres s√©ances üìã
    - Enrichir votre base d‚Äôexercices ‚ûï
    - Noter et filtrer vos exercices ‚≠ê
    - Exporter votre base en Excel üì§

    **Choisissez une option dans le menu √† gauche.**
    """)

# === GENERATEUR IA ===
elif choix == "üéØ G√©n√©rer une s√©ance IA":
    st.title("üéØ G√©n√©rateur IA de s√©ance")
    categorie = st.selectbox("Cat√©gorie d'√¢ge :", ["U9", "U11", "U13", "U15", "U17", "S√©nior"])
    objectif = st.selectbox("Objectif principal :", ["Technique", "Physique", "Tactique", "Mixte"])
    duree = st.slider("Dur√©e de la s√©ance (minutes)", 30, 120, 75, step=5)
    nb_joueurs = st.slider("Nombre de joueurs disponibles", 6, 25, 14)
    frequence = st.selectbox("Nombre de s√©ances par semaine :", [1, 2, 3, 4, 5])
    gardiens = st.checkbox("üß§ Inclure un programme sp√©cifique pour gardiens de but", value=False)

    if st.button("G√©n√©rer la s√©ance"):
        with st.spinner("G√©n√©ration IA en cours..."):
            programme = generer_programme_ia(categorie, objectif, duree, nb_joueurs, frequence, gardiens)
        st.success("‚úÖ S√©ance g√©n√©r√©e !")
        st.text(programme)
        st.download_button("üì• T√©l√©charger en .txt", exporter_programme_txt(programme), "entrainement.txt", mime="text/plain")
        st.download_button("üì§ T√©l√©charger en PDF", exporter_programme_pdf(programme), "entrainement.pdf", mime="application/pdf")

# === PLANIFICATION MULTI-SEANCES ===
elif choix == "üìÖ Planification multi-s√©ances":
    st.title("üìÖ Planification intelligente de plusieurs s√©ances")
    categorie = st.selectbox("Cat√©gorie d'√¢ge :", ["U9", "U11", "U13", "U15", "U17", "S√©nior"], key="cat_planif")
    objectif = st.selectbox("Objectif principal :", ["Technique", "Physique", "Tactique", "Mixte"], key="obj_planif")
    duree = st.slider("Dur√©e de chaque s√©ance", 30, 120, 75, step=5, key="dur_planif")
    nb_joueurs = st.slider("Effectif moyen", 6, 25, 14, key="nb_planif")
    frequence = st.selectbox("S√©ances par semaine", [1, 2, 3, 4, 5], key="freq_planif")
    gardiens = st.checkbox("Inclure gardiens ?", key="gard_planif")
    nb_seances = st.slider("Nombre de s√©ances √† g√©n√©rer :", 2, 5, 3)

    if st.button("G√©n√©rer les s√©ances"):
        with st.spinner("Cr√©ation des s√©ances..."):
            liste = generer_planification_seances(categorie, objectif, duree, nb_joueurs, frequence, gardiens, nb_seances)
        st.success("‚úÖ Planification termin√©e !")
        for i, prog in enumerate(liste, 1):
            st.markdown(f"### üóìÔ∏è S√©ance {i}")
            st.text(prog)
        st.download_button("üì§ T√©l√©charger toute la planification en PDF", exporter_programme_pdf("\n\n".join(liste), titre="planification"), "planification.pdf", mime="application/pdf")

# === ENTRAINEMENT MANUEL ===
elif choix == "üìã Entra√Ænement manuel":
    st.title("üìã Composer manuellement un entra√Ænement")
    chemin_exos = os.path.join("ressources", "exercices.json")
    if os.path.exists(chemin_exos):
        with open(chemin_exos, "r", encoding="utf-8") as f:
            base_exos = json.load(f)
    else:
        st.warning("Aucune base d'exercices trouv√©e.")
        base_exos = {}

    categorie_manuelle = st.selectbox("Choisissez une cat√©gorie :", list(base_exos.keys()))
    selection = []
    if categorie_manuelle:
        for exo in base_exos[categorie_manuelle]:
            with st.expander(f"{exo['nom']} ({exo.get('duree', 'N/A')}) - ‚≠ê {exo.get('note', 3)}/5"):
                st.markdown(f"üéØ {exo.get('description', '')}")
                st.markdown(f"üß∞ Mat√©riel : {exo.get('materiel', '')}")
                if st.checkbox(f"‚úÖ Ajouter ¬´ {exo['nom']} ¬ª", key=exo['nom']):
                    selection.append(exo)

    if selection:
        plan = "PLAN D‚ÄôENTRA√éNEMENT MANUEL\n\n√âchauffement libre (10-15min)\n"
        for i, exo in enumerate(selection, 1):
            plan += f"\nAtelier {i} : {exo['nom']} ({exo['duree']})\nObjectif : {exo['description']}\nMat√©riel : {exo['materiel']}\n"
        plan += "\nRetour au calme / √©tirements\nConseils du coach"

        st.text(plan)
        st.download_button("üì• T√©l√©charger en .txt", exporter_programme_txt(plan), "entrainement_personnalise.txt", mime="text/plain")
        st.download_button("üì§ T√©l√©charger en PDF", exporter_programme_pdf(plan, titre="entrainement_personnalise"), "entrainement_personnalise.pdf", mime="application/pdf")

# === AJOUT D‚ÄôEXERCICE ===
elif choix == "‚ûï Ajouter un exercice":
    st.title("‚ûï Ajouter un nouvel exercice")

    chemin_exos = os.path.join("ressources", "exercices.json")
    if os.path.exists(chemin_exos):
        with open(chemin_exos, "r", encoding="utf-8") as f:
            base_exos = json.load(f)
    else:
        base_exos = {"exercices": []}

    with st.form("form_ajout"):
        nom = st.text_input("Nom de l'exercice")
        duree = st.text_input("Dur√©e (ex: 10 min)")
        description = st.text_area("Description")
        materiel = st.text_input("Mat√©riel")
        niveau = st.selectbox("Niveau", ["U9", "U11", "U13", "U15", "U17"])
        note = st.slider("Note", 1, 5, 3)
        submitted = st.form_submit_button("‚úÖ Ajouter")

        if submitted:
            exo = {
                "nom": nom,
                "duree": duree,
                "description": description,
                "materiel": materiel,
                "niveau": niveau,
                "note": note
            }
            base_exos["exercices"].append(exo)
            with open(chemin_exos, "w", encoding="utf-8") as f:
                json.dump(base_exos, f, indent=4, ensure_ascii=False)
            st.success(f"‚úÖ Exercice '{nom}' ajout√© avec succ√®s.")


# === PAGE PROFIL COACH ===
elif choix == "üë§ Mon profil":
    st.title("üë§ Mon profil d'entra√Æneur")
    with st.form("form_profil"):
        nom_coach = st.text_input("Nom du coach", value=profil.get("nom", ""))
        club = st.text_input("Nom du club", value=profil.get("club", ""))
        logo_upload = st.file_uploader("üì∏ Logo du club (PNG ou JPG)", type=["png", "jpg", "jpeg"])
        submitted = st.form_submit_button("üíæ Sauvegarder le profil")
    if submitted:
        if logo_upload:
            dossier_logos = os.path.join("ressources", "logos")
            os.makedirs(dossier_logos, exist_ok=True)
            chemin_logo = os.path.join(dossier_logos, logo_upload.name)
            with open(chemin_logo, "wb") as f:
                f.write(logo_upload.read())
            profil["logo"] = chemin_logo
        profil["nom"] = nom_coach
        profil["club"] = club
        with open(profil_path, "w", encoding="utf-8") as f:
            json.dump(profil, f, indent=4)
        st.success("‚úÖ Profil mis √† jour avec succ√®s ! Veuillez recharger la page pour voir les changements.")

elif choix == "‚≠ê Mes exercices":
    st.title("‚≠ê Ma biblioth√®que d'exercices")

    chemin_exos = os.path.join("ressources", "exercices.json")
    if os.path.exists(chemin_exos):
        with open(chemin_exos, "r", encoding="utf-8") as f:
            base_exos = json.load(f)
    else:
        st.warning("Aucun fichier d'exercices trouv√©.")
        base_exos = {"exercices": []}

    recherche = st.text_input("üîç Rechercher un mot-cl√©")
    niveau_filtre = st.selectbox("üéì Filtrer par niveau :", ["Tous", "U9", "U11", "U13", "U15", "U17"])

    exercices = base_exos.get("exercices", [])
    modif = False

    for i, exo in enumerate(exercices):
        nom = exo.get("nom", "")
        if recherche and recherche.lower() not in nom.lower():
            continue
        if niveau_filtre != "Tous" and exo.get("niveau") != niveau_filtre:
            continue

        with st.expander(f"{nom} ({exo.get('duree')}) ‚Äì Niveau {exo.get('niveau')} ‚≠ê{exo.get('note', 3)}"):
            st.markdown(f"üìù {exo.get('description')}")
            st.markdown(f"üì¶ Mat√©riel : {exo.get('materiel', 'N/A')}")
            nouvelle_note = st.slider("‚≠ê Note", 1, 5, exo.get("note", 3), key=f"note_{i}")
            if nouvelle_note != exo.get("note", 3):
                base_exos["exercices"][i]["note"] = nouvelle_note
                modif = True

    if modif:
        with open(chemin_exos, "w", encoding="utf-8") as f:
            json.dump(base_exos, f, indent=4, ensure_ascii=False)
        st.toast("üíæ Modifications sauvegard√©es.")


    for cat, idx in reversed(exercice_a_supprimer):
        del base_exos[cat][idx]
        modif_effectuee = True

    if modif_effectuee:
        with open(chemin_exos, "w", encoding="utf-8") as f:
            json.dump(base_exos, f, indent=4, ensure_ascii=False)
        st.toast("üíæ Modifications sauvegard√©es avec succ√®s.")

    # EXPORT EXCEL
    if st.button("üì• Exporter toute la base au format Excel (.xlsx)"):
        liste_export = []
        for cat, exercices in base_exos.items():
            for exo in exercices:
                ligne = {
                    "Cat√©gorie": cat,
                    "Nom": exo.get("nom", ""),
                    "Description": exo.get("description", ""),
                    "Mat√©riel": exo.get("materiel", ""),
                    "Dur√©e": exo.get("duree", ""),
                    "Note": exo.get("note", ""),
                    "Niveau": exo.get("niveau", "")
                }
                liste_export.append(ligne)

        df = pd.DataFrame(liste_export)
        buffer = io.BytesIO()
        with pd.ExcelWriter(buffer, engine='xlsxwriter') as writer:
            df.to_excel(writer, index=False, sheet_name="Exercices")
        buffer.seek(0)

        st.download_button(
            label="üìä T√©l√©charger le fichier Excel",
            data=buffer,
            file_name="base_exercices_coachIA.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        )

